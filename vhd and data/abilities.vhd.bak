library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;

entity abilities is
  port
  (
    clock                   : in std_logic;
    vsync                   : in std_logic;
    speed                   : in std_logic_vector(2 downto 0);
    pixel_row, pixel_column : in std_logic_vector(9 downto 0);
    ability_type            : out std_logic_vector(1 downto 0);
    r, g, b                 : out std_logic_vector(3 downto 0);
    ability1_on             : out std_logic
  );
end entity abilities;

architecture beh of abilities is
  constant ability_width : integer := 16;
  -- SIGNAL ability1_x_pos : std_logic_vector(10 downto 0);

  signal ability_relative_x_pos : std_logic_vector(10 downto 0) := std_logic_vector(to_unsigned(to_integer(unsigned(pipe1_x_in)) + 200, 11));
  signal ability1_x_pos         : std_logic_vector(10 downto 0) := std_logic_vector(to_unsigned(799, 11));
  signal ability1_y_pos         : std_logic_vector(10 downto 0) := std_logic_vector(to_unsigned(200, 11));
  signal ability_reset          : std_logic                     := '0';

  component random_gen is
    port
    (
      clk, reset, enable : in std_logic;
      Q                  : out signed(7 downto 0)
    );
  end component;

begin
  MOVEMENT : process (vsync)
  begin
    if rising_edge(vsync) then
      ability1_x_pos <= (ability1_x_pos - to_integer(unsigned(speed)));

      if (ability1_x_pos <= - ability_width) then
        ability1_x_pos     <= std_logic_vector(to_unsigned(639, 11));
      end if;
    end if;

  end process;

  ability1_on <= '1' when ((pixel_row >= ability1_y_pos and pixel_row < ability1_y_pos + ability_width) and (pixel_column >= ability1_x_pos and pixel_column <= ability1_x_pos + ability_width)) else
    '0';

  r <= "0000";
  g <= "0000";
  b <= "0000";
end architecture;