library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.math_real.all;
use IEEE.STD_LOGIC_UNSIGNED.all;
use IEEE.STD_LOGIC_ARITH.all;

entity floor is
  port
  (
    rgba                               : in std_logic_vector(12 downto 0);
    pixel_row, pixel_column            : in std_logic_vector(9 downto 0);
    floor_sprite_row, floor_sprite_col : out std_logic_vector(3 downto 0);
    floor_sprite_tile                  : out std_logic;
    red, green, blue                   : out std_logic_vector(3 downto 0);
    floor_on                           : out std_logic);
end floor;

architecture behavior of floor is

  constant scale : integer := 2;

  signal f_on        : std_logic;
  signal x_pos       : std_logic_vector(9 downto 0);
  signal y_pos       : std_logic_vector(9 downto 0);
  signal floor_y_pos : std_logic_vector(9 downto 0);
  signal floor_x_pos : std_logic_vector(10 downto 0);

  signal floor_on_mask : std_logic_vector(3 downto 0);
begin

  floor_on_mask <= (others => f_on);

  x_pos <= CONV_STD_LOGIC_VECTOR(639, 10);
  y_pos <= CONV_STD_LOGIC_VECTOR(440, 10);
  -- floor_x_pos and floor_y_pos show the (x,y) for top left corner of the floor
  --floor_x_pos <= CONV_STD_LOGIC_VECTOR(0,11);
  --floor_y_pos <= CONV_STD_LOGIC_VECTOR(30,10);

  f_on <= '1' when (('0' & pixel_row >= '0' & y_pos) and ('0' & pixel_column <= '0' & x_pos))
    else
    '0';
  -- determine if floor is on or off
  -- floor_on <= '1' when ( ('0' & floor_x_pos <= '0' & pixel_column + size) and ('0' & pixel_column <= '0' & floor_x_pos + size) 	-- x_pos - size <= pixel_column <= x_pos + size
  -- 					and ('0' & floor_y_pos <= pixel_row + size) and ('0' & pixel_row <= floor_y_pos + size) )  else	-- y_pos - size <= pixel_row <= y_pos + size
  -- 			'0';

  -- Colours for pixel data on video signal
  -- Changing the background and ball colour by pushbuttons

  -- Set RGBA values of sprite
  red      <= rgba(11 downto 8) and floor_on_mask;
  green    <= rgba(7 downto 4) and floor_on_mask;
  blue     <= rgba(3 downto 0) and floor_on_mask;
  floor_on <= rgba(12);

  SPRITE : process (pixel_row, pixel_column)
    variable col_d, row_d   : ieee.numeric_std.unsigned(9 downto 0) := (others => '0');
    variable temp_c, temp_r : ieee.numeric_std.unsigned(9 downto 0) := (others => '0');
  begin
    if (floor_on) then
      --temp_c := ieee.numeric_std.unsigned(pixel_column - x_pos); -- Gets the pixels from 0 - size
      temp_c := ieee.numeric_std.unsigned(pixel_column);
      temp_r := ieee.numeric_std.unsigned(pixel_row - y_pos);
    else
      temp_c := (others => '0');
      temp_r := (others => '0');
    end if;
    col_d := shift_right(temp_c, scale - 1); -- divide be powers of 2 to change size
    row_d := shift_right(temp_r, scale - 1);

    floor_sprite_row  <= std_logic_vector(row_d(3 downto 0));
    floor_sprite_col  <= std_logic_vector(col_d(3 downto 0));
    floor_sprite_tile <= row_d(4);
  end process;

end behavior;